#!/usr/bin/env bash
# nginx-setup.sh
# Usage:
#   sudo bash nginx-setup.sh --domain app.example.com \
#     --static-root /var/www/app/build \
#     --api-upstream http://127.0.0.1:5000 \
#     [--letsencrypt you@example.com]
#
# Minimal (HTTP only):
#   sudo bash nginx-setup.sh --domain app.local --static-root /var/www/app/build --api-upstream http://127.0.0.1:5000

set -euo pipefail

# ===== Parse args =====
DOMAIN=""
STATIC_ROOT=""
API_UPSTREAM=""
LETSENCRYPT_EMAIL=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --domain) DOMAIN="$2"; shift 2;;
    --static-root) STATIC_ROOT="$2"; shift 2;;
    --api-upstream) API_UPSTREAM="$2"; shift 2;;
    --letsencrypt) LETSENCRYPT_EMAIL="$2"; shift 2;;
    *) echo "Unknown arg: $1"; exit 1;;
  esac
done

if [[ -z "$DOMAIN" || -z "$STATIC_ROOT" || -z "$API_UPSTREAM" ]]; then
  echo "Error: --domain, --static-root, --api-upstream are required."
  exit 1
fi

# ===== OS detection =====
ID="$(. /etc/os-release; echo "${ID}")"
FAMILY="$(. /etc/os-release; echo "${ID_LIKE:-$ID}")"

is_debian_like=false
is_rhel_like=false

if [[ "$ID" =~ (debian|ubuntu|linuxmint) || "$FAMILY" =~ debian ]]; then
  is_debian_like=true
elif [[ "$ID" =~ (rhel|centos|rocky|almalinux|fedora) || "$FAMILY" =~ (rhel|fedora|centos) ]]; then
  is_rhel_like=true
else
  echo "Unsupported OS. Detected ID=$ID ID_LIKE=$FAMILY"
  exit 1
fi

# ===== Install NGINX =====
if $is_debian_like; then
  apt-get update -y
  DEBIAN_FRONTEND=noninteractive apt-get install -y nginx
elif $is_rhel_like; then
  if command -v dnf >/dev/null 2>&1; then
    dnf install -y nginx
  else
    yum install -y epel-release || true
    yum install -y nginx
  fi
fi

# ===== Create static root dir =====
mkdir -p "$STATIC_ROOT"
chown -R www-data:www-data "$STATIC_ROOT" 2>/dev/null || chown -R nginx:nginx "$STATIC_ROOT" 2>/dev/null || true

# Seed a simple index if empty
if [ -z "$(ls -A "$STATIC_ROOT" 2>/dev/null)" ]; then
  cat > "$STATIC_ROOT/index.html" <<'HTML'
<!doctype html><html><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>App</title></head><body><div id="root"><h1>NGINX is live</h1></div></body></html>
HTML
fi

# ===== NGINX config paths =====
if $is_debian_like; then
  SITES_AVAILABLE="/etc/nginx/sites-available"
  SITES_ENABLED="/etc/nginx/sites-enabled"
  CONF_PATH="$SITES_AVAILABLE/app.conf"
  mkdir -p "$SITES_AVAILABLE" "$SITES_ENABLED"
  # disable default if present
  if [[ -f /etc/nginx/sites-enabled/default ]]; then rm -f /etc/nginx/sites-enabled/default; fi
else
  CONF_D="/etc/nginx/conf.d"
  mkdir -p "$CONF_D"
  CONF_PATH="$CONF_D/app.conf"
fi

# ===== Write config =====
cat > "$CONF_PATH" <<NGINX
# Generated by nginx-setup.sh
# Domain: $DOMAIN
# Static: $STATIC_ROOT
# API upstream: $API_UPSTREAM

# Gzip & basic tuning (global)
map \$sent_http_content_type \$expires {
    default                    off;
    ~*text/html                -1;
    ~*text/css                 7d;
    ~*application/javascript   7d;
    ~*image/                   30d;
    ~*font/                    30d;
}

server {
    listen 80;
    server_name $DOMAIN;

    # If you terminate TLS elsewhere, you can keep this HTTP-only.
    # For Let's Encrypt, we keep /.well-known accessible on :80 even after TLS.

    # Serve React build
    root $STATIC_ROOT;
    index index.html;

    # SPA fallback
    location / {
        try_files \$uri /index.html;
        expires \$expires;
    }

    # Static asset caching
    location ~* \.(?:css|js|mjs|png|jpg|jpeg|gif|svg|ico|webp|woff|woff2|ttf|otf)$ {
        try_files \$uri =404;
        access_log off;
        expires \$expires;
    }

    # API reverse proxy
    location /api/ {
        proxy_pass $API_UPSTREAM/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        # timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # ACME challenge (for Let's Encrypt)
    location ^~ /.well-known/acme-challenge/ {
        default_type "text/plain";
        root /var/www/letsencrypt;
    }

    # Security headers (add more as needed)
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header Referrer-Policy strict-origin-when-cross-origin;
}
NGINX

# Enable for Debian-like
if $is_debian_like; then
  ln -sf "$CONF_PATH" "$SITES_ENABLED/app.conf"
fi

# # ===== Firewall openings (best-effort) =====
# if command -v ufw >/dev/null 2>&1; then
#   ufw allow 80/tcp || true
#   ufw allow 443/tcp || true
# elif command -v firewall-cmd >/dev/null 2>&1; then
#   firewall-cmd --add-service=http --permanent || true
#   firewall-cmd --add-service=https --permanent || true
#   firewall-cmd --reload || true
# fi

# ===== Test & Reload =====
nginx -t
systemctl enable nginx
systemctl restart nginx

echo "NGINX HTTP setup completed for http://$DOMAIN"

# # ===== Optional: Let's Encrypt =====
# if [[ -n "$LETSENCRYPT_EMAIL" ]]; then
#   echo "[+] Setting up Let's Encrypt certificates for $DOMAIN"
#   mkdir -p /var/www/letsencrypt
#   if $is_debian_like; then
#     apt-get install -y certbot python3-certbot-nginx
#   else
#     if command -v dnf >/dev/null 2>&1; then
#       dnf install -y certbot python3-certbot-nginx
#     else
#       yum install -y certbot python3-certbot-nginx || true
#     fi
#   fi
#   # Obtain/renew cert and auto-edit nginx to 443
#   certbot --nginx -d "$DOMAIN" --non-interactive --agree-tos -m "$LETSENCRYPT_EMAIL" --redirect
#   systemctl reload nginx
#   echo "TLS enabled: https://$DOMAIN"
# else
#   echo "(Tip) Add TLS later: sudo certbot --nginx -d $DOMAIN -m you@example.com --agree-tos --redirect"
# fi

echo "Done âœ…"
